// Pins
const int buttonPin   = 2;   // ปุ่มแบบหน่วงเวลา (กดค้าง 20 วินาที)
const int overridePin = 4;   // ปุ่มบังคับเปิดทันที
const int ledPin      = 13;
const int relayPin    = 8;

// Relay active level (เปลี่ยนเป็น LOW ถ้ารีเลย์คุณเป็น Active LOW)
const int RELAY_ACTIVE_LEVEL   = HIGH;
const int RELAY_INACTIVE_LEVEL = (RELAY_ACTIVE_LEVEL == HIGH ? LOW : HIGH);

// Timing
const unsigned long TIMEOUT_MS = 20000; // 20 วินาที
const unsigned long BLINK_MS   = 500;   // กระพริบ 0.5 วิ

// State
bool timing       = false;  // กำลังกดและจับเวลาอยู่หรือไม่ (โหมด D2)
bool relayOn      = false;
bool ledState     = false;
bool overridePrev = false;  // เก็บสถานะก่อนหน้าไว้สำหรับ log

unsigned long pressStartMs        = 0;
unsigned long lastBlinkToggleMs   = 0;
unsigned long lastSecondTickMs    = 0;
unsigned long elapsedSecondsShown = 0;

void setup() {
  pinMode(ledPin, OUTPUT);

  // ใช้ internal pull-up
  pinMode(buttonPin,   INPUT_PULLUP); 
  pinMode(overridePin, INPUT_PULLUP); 
  pinMode(relayPin, OUTPUT);

  digitalWrite(relayPin, RELAY_INACTIVE_LEVEL);
  digitalWrite(ledPin, LOW);

  Serial.begin(115200);
  Serial.println(F("== System Ready =="));
  Serial.println(F("D2: กดค้าง 20 วิ เพื่อเปิดรีเลย์"));
  Serial.println(F("D4: กดเพื่อเปิดรีเลย์ทันที (ปล่อย = ปิด)"));
}

void loop() {
  const bool buttonPressed   = (digitalRead(buttonPin)   == LOW);
  const bool overridePressed = (digitalRead(overridePin) == LOW);

  // ---------- โหมดบังคับเปิดทันที (D4) ----------
  if (overridePressed) {
    if (!overridePrev) {
      Serial.println(F("[OVERRIDE] กด D4 → เปิดรีเลย์ทันที"));
    }
    digitalWrite(relayPin, RELAY_ACTIVE_LEVEL);
    digitalWrite(ledPin, HIGH);

    // รีเซ็ตโหมดจับเวลา
    if (timing) {
      timing = false;
      relayOn = false;
      ledState = false;
    }
    overridePrev = true;
    return; // ไม่ทำโหมดจับเวลา
  } else if (overridePrev) {
    Serial.println(F("[OVERRIDE] ปล่อย D4 → ปิดรีเลย์"));
    digitalWrite(relayPin, RELAY_INACTIVE_LEVEL);
    digitalWrite(ledPin, LOW);
    overridePrev = false;
  }

  // ---------- โหมดจับเวลา (D2) ----------
  if (buttonPressed) {
    if (!timing) {
      timing = true;
      relayOn = false;
      pressStartMs = millis();
      lastBlinkToggleMs = millis();
      lastSecondTickMs = millis();
      elapsedSecondsShown = 0;

      Serial.println(F("[BTN] กด D2: เริ่มจับเวลา 20 วินาที"));
    }

    unsigned long now = millis();
    unsigned long elapsed = now - pressStartMs;

    if (!relayOn) {
      // กระพริบ LED
      if (now - lastBlinkToggleMs >= BLINK_MS) {
        ledState = !ledState;
        digitalWrite(ledPin, ledState ? HIGH : LOW);
        lastBlinkToggleMs = now;
      }

      // รายงานเวลาที่ผ่านไป
      if (now - lastSecondTickMs >= 1000) {
        elapsedSecondsShown++;
        Serial.print(F("[TIMER] ผ่านไป "));
        Serial.print(elapsedSecondsShown);
        Serial.println(F(" วินาที"));
        lastSecondTickMs += 1000;
      }

      // ครบเวลา → เปิดรีเลย์ + LED ค้าง
      if (elapsed >= TIMEOUT_MS) {
        relayOn = true;
        digitalWrite(relayPin, RELAY_ACTIVE_LEVEL);
        digitalWrite(ledPin, HIGH);
        Serial.println(F("[RELAY] ครบ 20 วินาที → เปิดรีเลย์ (ON)"));
      }
    }

  } else {
    // ปล่อยปุ่ม D2
    if (timing) {
      if (!relayOn) {
        Serial.print(F("[BTN] ปล่อย D2 ก่อนครบเวลา: ยกเลิกที่ "));
        Serial.print(elapsedSecondsShown);
        Serial.println(F(" วินาที"));
      } else {
        Serial.println(F("[BTN] ปล่อย D2 หลังครบเวลา: ปิดรีเลย์"));
      }
    }

    timing = false;
    relayOn = false;
    digitalWrite(relayPin, RELAY_INACTIVE_LEVEL);
    digitalWrite(ledPin, LOW);
    ledState = false;
  }
}
